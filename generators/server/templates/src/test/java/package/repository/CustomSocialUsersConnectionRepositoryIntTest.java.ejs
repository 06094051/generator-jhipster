<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.repository;

import <%=packageName%>.<%= mainClass %>;
import <%=packageName%>.domain.SocialUserConnection;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
<%_if (databaseType !== 'couchbase') { _%>
import org.springframework.dao.DataIntegrityViolationException;
<%_ } _%>
import org.springframework.social.connect.*;
import org.springframework.social.connect.support.ConnectionFactoryRegistry;
import org.springframework.social.connect.support.OAuth1ConnectionFactory;
import org.springframework.social.connect.support.OAuth2ConnectionFactory;
import org.springframework.social.oauth1.OAuth1Operations;
import org.springframework.social.oauth1.OAuth1ServiceProvider;
import org.springframework.social.oauth2.*;
import org.springframework.test.context.junit4.SpringRunner;<% if (databaseType === 'sql') { %>
import org.springframework.transaction.annotation.Transactional;<% } %>
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

<%_if (databaseType === 'couchbase') { _%>
import static <%= packageName %>.web.rest.TestUtil.mockAuthentication;
<%_ } _%>
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = <%= mainClass %>.class)<% if (databaseType === 'sql') { %>
@Transactional<% } %>
public class CustomSocialUsersConnectionRepositoryIntTest {

    private ConnectionFactoryRegistry connectionFactoryRegistry;

    private TestSocialConnectionFactory connectionFactory;

    private CustomSocialUsersConnectionRepository usersConnectionRepository;

    private ConnectionRepository connectionRepository;

    @Autowired
    private SocialUserConnectionRepository socialUserConnectionRepository;

    @Before
    public void setUp() {
        <%_ if (databaseType === 'couchbase') { _%>
        mockAuthentication();
        <%_ } _%>
		socialUserConnectionRepository.deleteAll();

        connectionFactoryRegistry = new ConnectionFactoryRegistry();
        connectionFactory = new TestSocialConnectionFactory();
        connectionFactoryRegistry.addConnectionFactory(connectionFactory);
        usersConnectionRepository = new CustomSocialUsersConnectionRepository(socialUserConnectionRepository, connectionFactoryRegistry);
        connectionRepository = usersConnectionRepository.createConnectionRepository("1");
    }

    @Test
    public void findUserIdWithConnection() {
        insertSocialConnection();
        List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestSocialApi.class));
        assertEquals("1", userIds.get(0));
    }

    @Test
    public void findUserIdWithConnectionNoSuchConnection() {
        Connection<TestSocialApi> connection = connectionFactory.createConnection(new AccessGrant("12345"));
        assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());
    }

    @Test
    public void findUserIdWithConnectionMultipleConnectionsToSameProviderUser() {
        insertSocialConnection();
        insertSocialConnectionSameSocialUser();
        List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestSocialApi.class));
        assertThat(localUserIds).containsExactly("1", "2");
    }

    @Test
    public void findUserIdsConnectedTo() {
        insertSocialConnection();
        insertSocialConnection3();
        Set<String> localUserIds = usersConnectionRepository.findUserIdsConnectedTo("Social", new HashSet<>(Arrays.asList("9", "11")));
        assertEquals(2, localUserIds.size());
        assertTrue(localUserIds.contains("1"));
        assertTrue(localUserIds.contains("2"));
    }

    @Test
    @SuppressWarnings("unchecked")
    public void findAllConnections() {
        connectionFactoryRegistry.addConnectionFactory(new TestTwitterConnectionFactory());
        insertTwitterConnection();
        insertSocialConnection();
        MultiValueMap<String, Connection<?>> connections = connectionRepository.findAllConnections();
        assertEquals(2, connections.size());
        Connection<TestSocialApi> Social = (Connection<TestSocialApi>) connections.getFirst("Social");
        assertSocialConnection(Social);
        Connection<TestTwitterApi> twitter = (Connection<TestTwitterApi>) connections.getFirst("twitter");
        assertTwitterConnection(twitter);
    }

    @Test
    public void findAllConnectionsMultipleConnectionResults() {
        connectionFactoryRegistry.addConnectionFactory(new TestTwitterConnectionFactory());
        insertTwitterConnection();
        insertSocialConnection();
        insertSocialConnection2();
        MultiValueMap<String, Connection<?>> connections = connectionRepository.findAllConnections();
        assertEquals(2, connections.size());
        assertEquals(2, connections.get("Social").size());
        assertEquals(1, connections.get("twitter").size());
    }

    @Test
    public void findAllConnectionsEmptyResult() {
        connectionFactoryRegistry.addConnectionFactory(new TestTwitterConnectionFactory());
        MultiValueMap<String, Connection<?>> connections = connectionRepository.findAllConnections();
        assertEquals(2, connections.size());
        assertEquals(0, connections.get("Social").size());
        assertEquals(0, connections.get("twitter").size());
    }

    @Test(expected = IllegalArgumentException.class)
    public void noSuchConnectionFactory() {
        insertTwitterConnection();
        connectionRepository.findAllConnections();
    }

    @Test
    @SuppressWarnings("unchecked")
    public void findConnectionsByProviderId() {
        connectionFactoryRegistry.addConnectionFactory(new TestTwitterConnectionFactory());
        insertTwitterConnection();
        List<Connection<?>> connections = connectionRepository.findConnections("twitter");
        assertEquals(1, connections.size());
        assertTwitterConnection((Connection<TestTwitterApi>) connections.get(0));
    }

    @Test
    public void findConnectionsByProviderIdEmptyResult() {
        assertTrue(connectionRepository.findConnections("Social").isEmpty());
    }

    @Test
    public void findConnectionsByApi() {
        insertSocialConnection();
        insertSocialConnection2();
        List<Connection<TestSocialApi>> connections = connectionRepository.findConnections(TestSocialApi.class);
        assertEquals(2, connections.size());
        assertSocialConnection(connections.get(0));
    }

    @Test
    public void findConnectionsByApiEmptyResult() {
        assertTrue(connectionRepository.findConnections(TestSocialApi.class).isEmpty());
    }

    @Test
    @SuppressWarnings("unchecked")
    public void findConnectionsToUsers() {
        connectionFactoryRegistry.addConnectionFactory(new TestTwitterConnectionFactory());
        insertTwitterConnection();
        insertSocialConnection();
        insertSocialConnection2();
        MultiValueMap<String, String> providerUsers = new LinkedMultiValueMap<>();
        providerUsers.add("Social", "10");
        providerUsers.add("Social", "9");
        providerUsers.add("twitter", "1");
        MultiValueMap<String, Connection<?>> connectionsForUsers = connectionRepository.findConnectionsToUsers(providerUsers);
        assertEquals(2, connectionsForUsers.size());
        String providerId=connectionsForUsers.getFirst("Social").getKey().getProviderUserId();
        assertTrue("10".equals(providerId) || "9".equals(providerId) );
        assertSocialConnection((Connection<TestSocialApi>) connectionRepository.getConnection(new ConnectionKey("Social", "9")));
        assertTwitterConnection((Connection<TestTwitterApi>) connectionsForUsers.getFirst("twitter"));
    }

    @Test
    public void findConnectionsToUsersEmptyResult() {
        MultiValueMap<String, String> providerUsers = new LinkedMultiValueMap<>();
        providerUsers.add("Social", "1");
        assertTrue(connectionRepository.findConnectionsToUsers(providerUsers).isEmpty());
    }

    @Test(expected = IllegalArgumentException.class)
    public void findConnectionsToUsersEmptyInput() {
        MultiValueMap<String, String> providerUsers = new LinkedMultiValueMap<>();
        connectionRepository.findConnectionsToUsers(providerUsers);
    }

    @Test
    @SuppressWarnings("unchecked")
    public void findConnectionByKey() {
        insertSocialConnection();
        assertSocialConnection((Connection<TestSocialApi>) connectionRepository.getConnection(new ConnectionKey("Social", "9")));
    }

    @Test(expected = NoSuchConnectionException.class)
    public void findConnectionByKeyNoSuchConnection() {
        connectionRepository.getConnection(new ConnectionKey("Social", "bogus"));
    }

    @Test
    public void findConnectionByApiToUser() {
        insertSocialConnection();
        insertSocialConnection2();
        assertSocialConnection(connectionRepository.getConnection(TestSocialApi.class, "9"));
        assertEquals("10", connectionRepository.getConnection(TestSocialApi.class, "10").getKey().getProviderUserId());
    }

    @Test(expected = NoSuchConnectionException.class)
    public void findConnectionByApiToUserNoSuchConnection() {
        assertSocialConnection(connectionRepository.getConnection(TestSocialApi.class, "9"));
    }

    @Test
    public void findPrimaryConnection() {
        insertSocialConnection();
        assertSocialConnection(connectionRepository.getPrimaryConnection(TestSocialApi.class));
    }

    @Test
    public void findPrimaryConnectionSelectFromMultipleByRank() {
        insertSocialConnection2();
        insertSocialConnection();
        assertSocialConnection(connectionRepository.getPrimaryConnection(TestSocialApi.class));
    }

    @Test(expected = NotConnectedException.class)
    public void findPrimaryConnectionNotConnected() {
        connectionRepository.getPrimaryConnection(TestSocialApi.class);
    }

    @Test
    public void removeConnections() {
        SocialUserConnection SocialConnection = insertSocialConnection();
        insertSocialConnection2();
        assertThat(socialUserConnectionRepository.findById(SocialConnection.getId()).isPresent()).isTrue();
        connectionRepository.removeConnections("Social");
        assertThat(socialUserConnectionRepository.findById(SocialConnection.getId()).isPresent()).isFalse();
    }

    @Test
    public void removeConnectionsToProviderNoOp() {
        connectionRepository.removeConnections("twitter");
    }

    @Test
    public void removeConnection() {
        SocialUserConnection SocialConnection = insertSocialConnection();
        assertThat(socialUserConnectionRepository.findById(SocialConnection.getId()).isPresent()).isTrue();;
        connectionRepository.removeConnection(new ConnectionKey("Social", "9"));
        assertThat(socialUserConnectionRepository.findById(SocialConnection.getId()).isPresent()).isFalse();
    }

    @Test
    public void removeConnectionNoOp() {
        connectionRepository.removeConnection(new ConnectionKey("Social", "1"));
    }

    @Test
    public void addConnection() {
        Connection<TestSocialApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));
        connectionRepository.addConnection(connection);
        Connection<TestSocialApi> restoredConnection = connectionRepository.getPrimaryConnection(TestSocialApi.class);
        assertEquals(connection, restoredConnection);
        assertNewConnection(restoredConnection);
    }
<% if (databaseType !== 'couchbase') { %>
    @Test(expected = DataIntegrityViolationException.class)
    public void addConnectionDuplicate() {
        Connection<TestSocialApi> connection = connectionFactory.createConnection(new AccessGrant("123456789", null, "987654321", 3600L));
        connectionRepository.addConnection(connection);
        connectionRepository.addConnection(connection);<% if (databaseType === 'sql') { %>
        socialUserConnectionRepository.flush();<% } %>
    }
<% } %>
    @Test
    public void updateConnectionProfileFields() {
        connectionFactoryRegistry.addConnectionFactory(new TestTwitterConnectionFactory());
        insertTwitterConnection();
        Connection<TestTwitterApi> twitter = connectionRepository.getPrimaryConnection(TestTwitterApi.class);
        assertEquals("http://twitter.com/java_hipster/picture", twitter.getImageUrl());
        twitter.sync();
        assertEquals("http://twitter.com/java_hipster/a_new_picture", twitter.getImageUrl());
        connectionRepository.updateConnection(twitter);
        Connection<TestTwitterApi> twitter2 = connectionRepository.getPrimaryConnection(TestTwitterApi.class);
        assertEquals("http://twitter.com/java_hipster/a_new_picture", twitter2.getImageUrl());
    }

    @Test
    public void updateConnectionAccessFields() {
        insertSocialConnection();
        Connection<TestSocialApi> Social = connectionRepository.getPrimaryConnection(TestSocialApi.class);
        assertEquals("234567890", Social.getApi().getAccessToken());
        Social.refresh();
        connectionRepository.updateConnection(Social);
        Connection<TestSocialApi> Social2 = connectionRepository.getPrimaryConnection(TestSocialApi.class);
        assertEquals("765432109", Social2.getApi().getAccessToken());
        ConnectionData data = Social.createData();
        assertEquals("654321098", data.getRefreshToken());
    }

    @Test
    public void findPrimaryConnection_afterRemove() {
        insertSocialConnection();
        insertSocialConnection2();
        // 9 is the providerUserId of the first Social connection
        connectionRepository.removeConnection(new ConnectionKey("Social", "9"));
        assertEquals(1, connectionRepository.findConnections(TestSocialApi.class).size());
        assertNotNull(connectionRepository.findPrimaryConnection(TestSocialApi.class));
    }

    private SocialUserConnection insertTwitterConnection() {
        return createExistingSocialUserConnection(
            "1",
            "twitter",
            "1",
            1L,
            "@java_hipster",
            "http://twitter.com/java_hipster",
            "http://twitter.com/java_hipster/picture",
            "123456789",
            "987654321",
            null,
            null
        );
    }

    private SocialUserConnection insertSocialConnection() {
        return createExistingSocialUserConnection(
            "1",
            "Social",
            "9",
            1L,
            null,
            null,
            null,
            "234567890",
            null,
            "345678901",
            System.currentTimeMillis() + 3600000);
    }

    private SocialUserConnection insertSocialConnection2() {
        return createExistingSocialUserConnection(
            "1",
            "Social",
            "10",
            2L,
            null,
            null,
            null,
            "456789012",
            null,
            "56789012",
            System.currentTimeMillis() + 3600000);
    }

    private SocialUserConnection insertSocialConnection3() {
        return createExistingSocialUserConnection(
            "2",
            "Social",
            "11", 2L,
            null,
            null,
            null,
            "456789012",
            null,
            "56789012",
            System.currentTimeMillis() + 3600000);
    }

    private SocialUserConnection insertSocialConnectionSameSocialUser() {
        return createExistingSocialUserConnection(
            "2",
            "Social",
            "9",
            1L,
            null,
            null,
            null,
            "234567890",
            null,
            "345678901",
            System.currentTimeMillis() + 3600000);
    }

    private SocialUserConnection createExistingSocialUserConnection(String userId,
                                                                    String providerId,
                                                                    String providerUserId,
                                                                    Long rank,
                                                                    String displayName,
                                                                    String profileURL,
                                                                    String imageURL,
                                                                    String accessToken,
                                                                    String secret,
                                                                    String refreshToken,
                                                                    Long expireTime) {
        SocialUserConnection socialUserConnectionToSabe = new SocialUserConnection(
            userId,
            providerId,
            providerUserId,
            rank,
            displayName,
            profileURL,
            imageURL,
            accessToken,
            secret,
            refreshToken,
            expireTime);
        return socialUserConnectionRepository.save(socialUserConnectionToSabe);
    }

    private void assertNewConnection(Connection<TestSocialApi> connection) {
        assertEquals("Social", connection.getKey().getProviderId());
        assertEquals("9", connection.getKey().getProviderUserId());
        assertEquals("John Doe", connection.getDisplayName());
        assertEquals("http://jhipster.tech/john.doe", connection.getProfileUrl());
        assertEquals("http://jhipster.tech/john.doe/picture", connection.getImageUrl());
        assertTrue(connection.test());
        TestSocialApi api = connection.getApi();
        assertNotNull(api);
        assertEquals("123456789", api.getAccessToken());
        assertEquals("123456789", connection.createData().getAccessToken());
        assertEquals("987654321", connection.createData().getRefreshToken());
    }

    private void assertTwitterConnection(Connection<TestTwitterApi> twitter) {
        assertEquals(new ConnectionKey("twitter", "1"), twitter.getKey());
        assertEquals("@java_hipster", twitter.getDisplayName());
        assertEquals("http://twitter.com/java_hipster", twitter.getProfileUrl());
        assertEquals("http://twitter.com/java_hipster/picture", twitter.getImageUrl());
        TestTwitterApi twitterApi = twitter.getApi();
        assertEquals("123456789", twitterApi.getAccessToken());
        assertEquals("987654321", twitterApi.getSecret());
        twitter.sync();
        assertEquals("http://twitter.com/java_hipster/a_new_picture", twitter.getImageUrl());
    }

    private void assertSocialConnection(Connection<TestSocialApi> Social) {
        assertEquals(new ConnectionKey("Social", "9"), Social.getKey());
        assertEquals(null, Social.getDisplayName());
        assertEquals(null, Social.getProfileUrl());
        assertEquals(null, Social.getImageUrl());
        TestSocialApi SocialApi = Social.getApi();
        assertEquals("234567890", SocialApi.getAccessToken());
        Social.sync();
        assertEquals("John Doe", Social.getDisplayName());
        assertEquals("http://jhipster.tech/john.doe", Social.getProfileUrl());
        assertEquals("http://jhipster.tech/john.doe/picture", Social.getImageUrl());
    }

    // test Social provider
    private static class TestSocialConnectionFactory extends OAuth2ConnectionFactory<TestSocialApi> {

        public TestSocialConnectionFactory() {
            super("Social", new TestSocialServiceProvider(), new TestSocialApiAdapter());
        }
    }

    private static class TestSocialServiceProvider implements OAuth2ServiceProvider<TestSocialApi> {

        public OAuth2Operations getOAuthOperations() {
            return new OAuth2Operations() {
                public String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters params) {
                    return null;
                }

                public String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters params) {
                    return null;
                }

                public String buildAuthorizeUrl(OAuth2Parameters params) {
                    return null;
                }

                public String buildAuthenticateUrl(OAuth2Parameters params) {
                    return null;
                }

                public AccessGrant exchangeForAccess(String authorizationGrant, String redirectUri, MultiValueMap<String, String> additionalParameters) {
                    return null;
                }

                public AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters) {
                    return null;
                }

                public AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters) {
                    return new AccessGrant("765432109", "read", "654321098", 3600L);
                }

                @Deprecated
                public AccessGrant refreshAccess(String refreshToken, String scope, MultiValueMap<String, String> additionalParameters) {
                    return new AccessGrant("765432109", "read", "654321098", 3600L);
                }

                public AccessGrant authenticateClient() {
                    return null;
                }

                public AccessGrant authenticateClient(String scope) {
                    return null;
                }
            };
        }

        public TestSocialApi getApi(final String accessToken) {
            return () -> accessToken;
        }

    }

    public interface TestSocialApi {

        String getAccessToken();

    }

    private static class TestSocialApiAdapter implements ApiAdapter<TestSocialApi> {

        private String accountId = "9";

        private String name = "John Doe";

        private String profileUrl = "http://jhipster.tech/john.doe";

        private String profilePictureUrl = "http://jhipster.tech/john.doe/picture";

        public boolean test(TestSocialApi api) {
            return true;
        }

        public void setConnectionValues(TestSocialApi api, ConnectionValues values) {
            values.setProviderUserId(accountId);
            values.setDisplayName(name);
            values.setProfileUrl(profileUrl);
            values.setImageUrl(profilePictureUrl);
        }

        public UserProfile fetchUserProfile(TestSocialApi api) {
            return new UserProfileBuilder().setName(name).setEmail("jdoe@jhipster.tech").setUsername("John.Doe").build();
        }

        public void updateStatus(TestSocialApi api, String message) {

        }
    }

    // test twitter provider
    private static class TestTwitterConnectionFactory extends OAuth1ConnectionFactory<TestTwitterApi> {

        public TestTwitterConnectionFactory() {
            super("twitter", new TestTwitterServiceProvider(), new TestTwitterApiAdapter());
        }
    }

    private static class TestTwitterServiceProvider implements OAuth1ServiceProvider<TestTwitterApi> {

        public OAuth1Operations getOAuthOperations() {
            return null;
        }

        public TestTwitterApi getApi(final String accessToken, final String secret) {
            return new TestTwitterApi() {
                public String getAccessToken() {
                    return accessToken;
                }

                public String getSecret() {
                    return secret;
                }
            };
        }

    }

    public interface TestTwitterApi {

        String getAccessToken();

        String getSecret();

    }

    private static class TestTwitterApiAdapter implements ApiAdapter<TestTwitterApi> {

        private String accountId = "1";

        private String name = "@java_hipster";

        private String profileUrl = "http://twitter.com/java_hipster";

        private String profilePictureUrl = "http://twitter.com/java_hipster/a_new_picture";

        public boolean test(TestTwitterApi api) {
            return true;
        }

        public void setConnectionValues(TestTwitterApi api, ConnectionValues values) {
            values.setProviderUserId(accountId);
            values.setDisplayName(name);
            values.setProfileUrl(profileUrl);
            values.setImageUrl(profilePictureUrl);
        }

        public UserProfile fetchUserProfile(TestTwitterApi api) {
            return new UserProfileBuilder().setName(name).setUsername("java_hipster").build();
        }

        public void updateStatus(TestTwitterApi api, String message) {
        }

    }
}
