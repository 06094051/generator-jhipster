import * as React from 'react';
import { Translate, translate } from 'react-jhipster';
import { connect } from 'react-redux';
import { AvForm, AvField } from 'availity-reactstrap-validation';
import { Row, Col, Button, Alert } from 'reactstrap';

import { getSession } from 'app/shared/reducers/authentication';
import PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';
import { savePassword, reset } from './password.reducer';

export interface IUserSettingsProps {
  account: any;
  updateSuccess: boolean;
  updateFailure: boolean;
  getSession: Function;
  savePassword: Function;
  reset: Function;
}

export interface IUserSettingsState {
  password: string;
}

export class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {
  state: IUserSettingsState = {
    password: ''
  };

  componentDidMount() {
    this.props.reset();
    this.props.getSession();
  }

  componentWillUnmount() {
    this.props.reset();
  }

  handleValidSubmit = (event, values) => {
    this.props.savePassword(values.currentPassword, values.newPassword);
  };

  updatePassword = event => {
    this.setState({ password: event.target.value });
  };

  render() {
    const { account, updateSuccess, updateFailure } = this.props;
    let alertMessage = null;

    if (updateFailure) {
      alertMessage = (
        <Alert color="danger">
          <Translate contentKey="password.messages.error">
            <strong>An error has occurred!</strong> The password could not be changed.
          </Translate>
        </Alert>
      );
    } else {
      if (updateSuccess) {
        alertMessage = (
          <Alert color="success">
            <Translate contentKey="password.messages.success">
              <strong>Password changed!</strong>
            </Translate>
          </Alert>
        );
      } else {
        alertMessage = null;
      }
    }

    return (
      <div>
        <Row className="justify-content-center">
            <Col md="8">
                <h2><Translate contentKey="password.title" interpolate={{ username: account.login }}>Password for [{account.login}]</h2>
                {alertMessage}
                <AvForm onValidSubmit={this.handleValidSubmit}>
                <AvField
                    name="currentPassword"
                    label={<Translate contentKey="global.form.currentpassword">Current password</Translate>}
                    placeholder={translate('global.form.currentpassword.placeholder', null, 'Current password')}
                    type="password"
                    validate={{
                    required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required', null, 'Your password is required.') }
                    }}
                />
                <AvField
                    name="newPassword"
                    label={<Translate contentKey="global.form.newpassword">New password</Translate>}
                    placeholder={translate('global.form.newpassword.placeholder', null, 'New password')}
                    type="password"
                    validate={{
                    required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required', null, 'Your password is required.') },
                    minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength', null, 'Your password is required to be at least 4 characters.') },
                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength', null, 'Your password cannot be longer than 50 characters.') }
                    }}
                    onChange={this.updatePassword}
                />
                <PasswordStrengthBar password={this.state.password} />
                <AvField
                    name="confirmPassword"
                    label={<Translate contentKey="global.form.confirmpassword" />}
                    placeholder={translate('global.form.confirmpassword.placeholder', null, 'Confirm the new password')}
                    type="password"
                    validate={{
                    required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required', null, 'Your confirmation password is required.') },
                    minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength', null, 'Your confirmation password is required to be at least 4 characters.') },
                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength', null, 'Your confirmation password cannot be longer than 50 characters.') },
                    match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch', null, 'The password and its confirmation do not match!') }
                    }}
                />
                <Button color="success" type="submit">
                    <Translate contentKey="password.form.button" />
                </Button>
                </AvForm>
            </Col>
        </Row>
      </div>
    );
  }
}

const mapStateToProps = ({ authentication, password }) => ({
  updateSuccess: password.updateSuccess,
  updateFailure: password.updateFailure,
  account: authentication.account,
  isAuthenticated: authentication.isAuthenticated
});

const mapDispatchToProps = { getSession, savePassword, reset };

export default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);
