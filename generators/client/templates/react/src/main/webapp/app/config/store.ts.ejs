import { createStore, applyMiddleware, compose } from 'redux';
import promiseMiddleware from 'redux-promise-middleware';
import thunkMiddleware from 'redux-thunk';
import reducer from 'app/shared/reducers';
import DevTools from './devtools';
import errorMiddleware from './error-middleware';
import notificationMiddleware from './notification-middleware';
import loggerMiddleware from './logger-middleware';
<%_ if (websocket === 'spring-websocket') { _%>
import websocketMiddleware from './websocket-middleware';
<%_ } _%>
import { loadingBarMiddleware } from 'react-redux-loading-bar';

const defaultMiddlewares = [
  thunkMiddleware,
  errorMiddleware,
  notificationMiddleware,
  promiseMiddleware(),
  loadingBarMiddleware(),
  <%_ if (websocket === 'spring-websocket') { _%>
  websocketMiddleware,
  <%_ } _%>
  loggerMiddleware
];
const composedMiddlewares = middlewares => process.env.NODE_ENV === 'development' ?
  compose(applyMiddleware(...defaultMiddlewares, ...middlewares), DevTools.instrument()) :
  compose(applyMiddleware(...defaultMiddlewares, ...middlewares));

const initialize = (initialState = {}, middlewares = []) =>
    createStore(reducer, initialState, composedMiddlewares(middlewares));

export default initialize;
