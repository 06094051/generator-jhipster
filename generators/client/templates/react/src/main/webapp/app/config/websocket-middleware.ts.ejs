import * as SockJS from 'sockjs-client';
import * as Stomp from 'webstomp-client';
import { Observable, Observer } from 'rxjs';
import { Storage } from 'react-jhipster';

class WebsocketService {
  stompClient = null;
  subscriber = null;
  connection: Promise<any>;
  connectedPromise: any = null;
  listener: Observable<any>;
  listenerObserver: Observer<any>;
  alreadyConnectedOnce = false;

  public connect() {
    if (this.connectedPromise !== null || this.alreadyConnectedOnce) {
      // the connection is already being established
      return;
    }
    this.connection = this.createConnection();
    this.listener = this.createListener();

    // building absolute path so that websocket doesn't fail when deploying with a context path
    const loc = window.location;
    let url = '//' + loc.host + loc.pathname + 'websocket/tracker';
    const authToken = Storage.local.get('jhi-authenticationToken') || Storage.session.get('jhi-authenticationToken');
    if (authToken) {
      url += '?access_token=' + authToken;
    }
    const socket = new SockJS(url);
    this.stompClient = Stomp.over(socket);
    const headers = {};
    this.stompClient.connect(headers, () => {
      this.connectedPromise('success');
      this.connectedPromise = null;
      this.sendActivity();
      if (!this.alreadyConnectedOnce) {
        window.onhashchange = () => {
          this.sendActivity();
        };
        this.alreadyConnectedOnce = true;
      }
    });
  }

  disconnect() {
    if (this.stompClient !== null) {
      this.stompClient.disconnect();
      this.stompClient = null;
    }
    window.onhashchange = () => {}
    this.alreadyConnectedOnce = false;
  }

  receive() {
    return this.listener;
  }

  sendActivity() {
    if (this.stompClient !== null && this.stompClient.connected) {
      this.stompClient.send(
        '/topic/activity', // destination
        JSON.stringify({ page: window.location.hash }), // body
        {} // header
      );
    }
  }

  subscribe() {
    this.connection.then(() => {
      this.subscriber = this.stompClient.subscribe('/topic/tracker', data => {
        this.listenerObserver.next(JSON.parse(data.body));
      });
    });
  }

  unsubscribe() {
    if (this.subscriber !== null) {
      this.subscriber.unsubscribe();
    }
    this.listener = this.createListener();
  }

  private createListener(): Observable<any> {
    return new Observable(observer => {
      this.listenerObserver = observer;
    });
  }

  private createConnection(): Promise<any> {
    return new Promise((resolve, reject) => (this.connectedPromise = resolve));
  }
}

export const TrackerService = new WebsocketService();

export default () => next => action => {
  if (action.type === 'authentication/GET_SESSION_FULFILLED') {
    TrackerService.connect();
  } else if (action.type === 'authentication/GET_SESSION_REJECTED') {
    TrackerService.disconnect();
  }
  return next(action);
};
