/* tslint:disable no-unused-expression */
import { browser } from 'protractor';

import SignInPage from '../../page-objects/signin-page';
import PasswordPage from '../../page-objects/password-page';
import NavBarPage from '../../page-objects/navbar-page';
import RegisterPage from '../../page-objects/register-page';
import { SettingsPage } from '../../page-objects/settings-page';
import { getDeactivatedButtonByLogin, waitUntilDisplayed, waitUntilHidden, waitUntilTextIsPresentInElementValue, <% if (enableTranslation) { %>getToastByClassName<% } else { %>getToastByInnerText<% } %> } from '../../util/utils';

const expect = chai.expect;

describe('Account', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let passwordPage: PasswordPage;
  let registerPage: RegisterPage;
  let settingsPage: SettingsPage;

  const pageTitle = 'Sign in';

  before(() => {
    navBarPage = new NavBarPage();
    signInPage = navBarPage.signInPage;
    signInPage.get();
  });

  it('should fail to login with bad password', async () => {
    // Login page should appear
    expect(await signInPage.getTitle()).to.eq(pageTitle);
    signInPage.autoSignInUsing('admin', 'foo');
    // Login page should stay open when login fails
    expect(await signInPage.getTitle()).to.eq(pageTitle);
  });

  it('should login with admin account', async () => {
    // Login page should appear
    expect(await signInPage.getTitle()).to.eq(pageTitle);
    await signInPage.password.clear();
    signInPage.setPassword('admin');
    await signInPage.login();
    signInPage.waitUntilHidden();
    // Login page should close when login success
    expect(await signInPage.isHidden()()).to.be.true;
    navBarPage.autoSignOut();
  });

  it('should be able to sign up', async () => {
    registerPage = navBarPage.getRegisterPage();
    registerPage.autoSignUpUsing('user_test', 'usertest@jhipster.com', 'user_test');
    <%_ if (enableTranslation) { _%>
    const toast = getToastByClassName('register.messages.success');
    <%_ } else { _%>
    const toast = getToastByInnerText('<strong>Registration saved!</strong> Please check your email for confirmation.');
    <%_ } _%>
    waitUntilDisplayed(toast);
    // Success toast should appear
    expect(await toast.isPresent()).to.be.true;
  });

  it('should not be able to sign up if login already taken', async () => {
    await registerPage.save();
    <%_ if (enableTranslation) { _%>
    const toast = getToastByClassName('error.userexists');
    <%_ } else { _%>
    const toast = getToastByInnerText('Login already in use');
    <%_ } _%>
    waitUntilDisplayed(toast);
    // Error toast should appear
    expect(await toast.isPresent()).to.be.true;
  });

  it('should not be able to sign up if email already taken', async () => {
    await registerPage.username.clear();
    registerPage.setUserName('user_test2');
    await registerPage.save();
    <%_ if (enableTranslation) { _%>
    const toast = getToastByClassName('error.emailexists');
    <%_ } else { _%>
    const toast = getToastByInnerText('Email address already in use');
    <%_ } _%>
    waitUntilDisplayed(toast);
    // Error toast should appear
    expect(await toast.isPresent()).to.be.true;
  });

  it('should activate the new registered user', async () => {
    navBarPage.autoSignIn();
    browser.get('#/admin/user-management');
    const deactivatedButton = getDeactivatedButtonByLogin('user_test');
    await deactivatedButton.click();
    waitUntilHidden(deactivatedButton);
    // Deactivated button should disappear
    expect(await deactivatedButton.isPresent()).to.be.false;
    navBarPage.autoSignOut();
  });

  it('should be able to log in with new registered account', async () => {
    signInPage.get();
    signInPage.autoSignInUsing('user_test', 'user_test');
    signInPage.waitUntilHidden();
    // Login page should close when login success
    expect(await signInPage.isHidden()()).to.be.true;
    navBarPage.autoSignOut();
  });

  it('should fail to update password when using incorrect current password', async () => {
    navBarPage.autoSignIn();
    passwordPage = navBarPage.getPasswordPage();
    passwordPage.autoChangePassword('wrong_current_password', 'new_password', 'new_password');
    <%_ if (enableTranslation) { _%>
    const toast = getToastByClassName('password.messages.error');
    <%_ } else { _%>
    const toast = getToastByInnerText('<strong>An error has occurred!</strong> The password could not be changed.');
    <%_ } _%>
    waitUntilDisplayed(toast);
    await passwordPage.currentPassword.clear();
    await passwordPage.password.clear();
    await passwordPage.confirmPassword.clear();
    // Error toast should appear
    expect(await toast.isPresent()).to.be.true;
  });

  it('should be able to update password', async () => {
    passwordPage.autoChangePassword('admin', 'newpassword', 'newpassword');
    <%_ if (enableTranslation) { _%>
    const toast = getToastByClassName('password.messages.success');
    <%_ } else { _%>
    const toast = getToastByInnerText('<strong>Password changed!</strong>');
    <%_ } _%>
    waitUntilDisplayed(toast);
    // Success toast should appear
    expect(await toast.isPresent()).to.be.true;
    navBarPage.autoSignOut();
  });

  it('should be able to log in with new password', async () => {
    signInPage.get();
    signInPage.autoSignInUsing('admin', 'newpassword');
    signInPage.waitUntilHidden();
    // expect(await signInPage.isHidden()()).to.be.true;

    // change back to default
    passwordPage.get();
    passwordPage.autoChangePassword('newpassword', 'admin', 'admin');
    navBarPage.autoSignOut();
  });

  it('should be able to change settings', async () => {
  signInPage.get();
  signInPage.autoSignInUsing('user_test', 'user_test');
  settingsPage = navBarPage.getSettingsPage();
  settingsPage.setFirstName('jhipster');
  settingsPage.setLastName('retspihj');
  settingsPage.save();
  <%_ if (enableTranslation) { _%>
  const toast = getToastByClassName('settings.messages.success');
  <%_ } else { _%>
  const toast = getToastByInnerText('<strong>Settings saved!</strong>');
  <%_ } _%>
  waitUntilDisplayed(toast);
  // Success toast should appear
  expect(await toast.isPresent()).to.be.true;
  navBarPage.autoSignOut();
});

it('should not be able to change settings if email already exists', async () => {
  navBarPage.autoSignIn();
  settingsPage = navBarPage.getSettingsPage();
  waitUntilTextIsPresentInElementValue(settingsPage.email, 'admin@localhost');
  await settingsPage.email.clear();
  settingsPage.setEmail('usertest@jhipster.com');
  settingsPage.save();
  <%_ if (enableTranslation) { _%>
  const toast = getToastByClassName('error.emailexists');
  <%_ } else { _%>
  const toast = getToastByInnerText('Email address already in use');
  <%_ } _%>
  waitUntilDisplayed(toast);
  // Error toast should appear
  expect(await toast.isPresent()).to.be.true;
});

  after(() => signInPage.autoSignOut());
});
