import PasswordPage from '../../page-objects/password-page';
import SignInPage from '../../page-objects/signin-page';
import NavBarPage from '../../page-objects/navbar-page';

import { protractor, browser } from 'protractor';

const expect = chai.expect;

describe('Password change', () => {
  let signInPage: SignInPage;
  let passwordPage: PasswordPage;
  let navBarPage: NavBarPage;
  const until = protractor.ExpectedConditions;

  before(() => {
    signInPage = new SignInPage();
    passwordPage = new PasswordPage();
    navBarPage = new NavBarPage(true);

    browser.refresh();
  });

  it('should fail to update password when using incorrect current password', async () => {
    navBarPage.autoSignIn();

    navBarPage.clickOnAccountMenuItem('password');
    passwordPage.setCurrentPassword('wrong_current_password');
    passwordPage.setPassword('new_password');
    passwordPage.setConfirmPassword('new_password');
    passwordPage.save();

    const errorMessage = 'password.messages.error';
    browser.wait(until.elementToBeClickable(passwordPage.getToast()), 5000);
    expect(await passwordPage.getToast().getText()).to.eq('<strong>An error has occurred!</strong> The password could not be changed.');
  });

  it('should be able to update password', async () => {
    passwordPage.get();

    passwordPage.setCurrentPassword('admin');
    passwordPage.setPassword('newpassword');
    passwordPage.setConfirmPassword('newpassword');
    passwordPage.save();

    const successMessage = 'password.messages.success';
    browser.wait(until.elementToBeClickable(passwordPage.getToast()), 5000);
    expect(await passwordPage.getToast().getText()).to.eq('<strong>Password changed!</strong>');

    navBarPage.autoSignOut();
  });

  it('should be able to log in with new password', async () => {
    signInPage.get();
    signInPage.autoSignInUsing('admin', 'newpassword');
    signInPage.waitUntilHidden();

    // change back to default
    navBarPage.clickOnAccountMenuItem('password');
    passwordPage.setCurrentPassword('newpassword');
    passwordPage.setPassword('admin');
    passwordPage.setConfirmPassword('admin');
    passwordPage.save();
  });

  after(() => signInPage.autoSignOut());
});
