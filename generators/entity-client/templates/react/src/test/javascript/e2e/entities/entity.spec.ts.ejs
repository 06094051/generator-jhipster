<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
/* tslint:disable no-unused-expression */
<%_ if ( fieldsContainInstant || fieldsContainZonedDateTime ) { _%>
import { protractor } from 'protractor';
<%_ } _%>

import NavBarPage from './../../<%= entityParentPathAddition %>page-objects/navbar-page';
import <%= entityClass %>ComponentsPage from './<%= entityFileName %>.page-object';
import <%= entityClass %>UpdatePage from './<%= entityFileName%>-update.page-object';
<%_ if (fieldsContainBlobOrImage) { _%>
import * as path from 'path';
<%_ } _%>
<%_
let elementGetter = `getText()`;
let openBlockComment = ``;
let closeBlockComment = ``;
if (enableTranslation) {
    elementGetter = `getAttribute('jhiTranslate')`;
}
for (let relationship of relationships) {
    if (relationship.relationshipRequired) {
        openBlockComment = `/*`;
        closeBlockComment = `*/`;
        break;
    }
} _%>

const expect = chai.expect;

describe('<%= entityClass %> e2e test', () => {

    let navBarPage: NavBarPage;
    let <%= entityInstance %>UpdatePage: <%= entityClass %>UpdatePage;
    let <%= entityInstance %>ComponentsPage: <%= entityClass %>ComponentsPage;
    <%_ if (fieldsContainBlobOrImage) { _%>
    const fileToUpload = '../../../../../<%= entityParentPathAddition %>main/webapp/static/images/logo-jhipster.png';
    const absolutePath = path.resolve(__dirname, fileToUpload);
    <%_ } _%>

    before(() => {
        navBarPage = new NavBarPage();
        <%_ if (authenticationType === 'oauth2') { _%>
        navBarPage.getSignInPage().loginWithOAuth('admin', 'admin');
        <%_ } else { _%>
        navBarPage.autoSignIn();
        <%_ } _%>
    });

    it('should load <%= entityClassPlural %>', async () => {
        navBarPage.getEntityPage('<%= entityStateName %>');
        <%= entityInstance %>ComponentsPage = new <%= entityClass %>ComponentsPage();
        expect(await <%= entityInstance %>ComponentsPage.getTitle().getText())
            .to.match(/<%= entityClassPluralHumanized %>/);

    });

    it('should load create <%= entityClass %> page', async () => {
        <%= entityInstance %>ComponentsPage.clickOnCreateButton();
        <%= entityInstance %>UpdatePage = new <%= entityClass %>UpdatePage();
        <%_ if (enableTranslation) { _%>
        expect(await <%= entityInstance %>UpdatePage.getPageTitle().getAttribute('id'))
            .to.match(/<%= i18nKeyPrefix %>.home.createOrEditLabel/);
        <%_ } else { _%>
        expect(await <%= entityInstance %>UpdatePage.getPageTitle().getText())
            .to.match(/Create or edit a <%= entityClassHumanized %>/);
        <%_ } _%>
    });

   <%= openBlockComment %> it('should create and save <%= entityClassPlural %>', async () => {
        <%= entityInstance %>UpdatePage.cancel();
        <%= entityInstance %>ComponentsPage.clickOnCreateButton();
        <%_ relationships.forEach((relationship) => {
            const relationshipType = relationship.relationshipType;
            const ownerSide = relationship.ownerSide;
            const relationshipName = relationship.relationshipName;
            const relationshipFieldName = relationship.relationshipFieldName; _%>
        <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
        <%= entityInstance %>UpdatePage.<%=relationshipName %>SelectLastOption();
        <%_ } else if ((relationshipType === 'many-to-many' && ownerSide === true)) { _%>
        // <%= entityInstance %>UpdatePage.<%=relationshipName %>SelectLastOption();
        <%_ } _%>
        <%_ }); _%>
        <%_ fields.forEach((field) => {
            const fieldName = field.fieldName;
            const fieldNameCapitalized = field.fieldNameCapitalized;
            const fieldType = field.fieldType;
            const fieldTypeBlobContent = field.fieldTypeBlobContent;
            const fieldIsEnum = field.fieldIsEnum;
        _%>
        <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
        <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('5');
        expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.match('5');
        <%_ } else if (fieldType === 'LocalDate') { _%>
        <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('21-11-1995');
        expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('1995-11-21');
        <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
        <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('01/01/2001' + protractor.Key.TAB + '02:30AM');
        expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.contain('2001-01-01T02:30');
        <%_ } else if (fieldType === 'Boolean') { _%>
        const selected = await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input().isSelected();
        if (selected) {
            <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input().click();
            expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input().isSelected()).to.be.false;
        } else {
            <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input().click();
            expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input().isSelected()).to.be.true;
        }
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent === 'text') { _%>
        <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('<%= fieldName %>');
        expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('<%= fieldName %>');
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
        <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input(absolutePath);
        <%_ } else if (fieldIsEnum) { _%>
        <%= entityInstance %>UpdatePage.<%=fieldName %>SelectLastOption();
        <%_ } else if (fieldType === 'UUID'){ _%>
        <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('64c99148-3908-465d-8c4a-e510e3ade974');
        expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('64c99148-3908-465d-8c4a-e510e3ade974');
        <%_ } else { _%>
        <%= entityInstance %>UpdatePage.set<%= fieldNameCapitalized %>Input('<%= fieldName %>');
        expect(await <%= entityInstance %>UpdatePage.get<%= fieldNameCapitalized %>Input()).to.eq('<%= fieldName %>');
        <%_ } _%>
        <%_ }); _%>
        <%= entityInstance %>UpdatePage.save();
    });<%= closeBlockComment %>

    it('should return to <%= entityClassPlural %> page', async () => {
        expect(await <%= entityInstance %>UpdatePage.getSaveButton().isPresent()).to.be.false;
    });

    after(() => {
        navBarPage.autoSignOut();
    });
});
